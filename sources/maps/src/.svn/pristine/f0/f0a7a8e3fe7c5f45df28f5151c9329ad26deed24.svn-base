package kz.arta.synergy.maps.gwt.client;

import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.logical.shared.SelectionEvent;
import com.google.gwt.event.logical.shared.SelectionHandler;
import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.google.gwt.event.logical.shared.ValueChangeHandler;
import com.google.gwt.i18n.client.DateTimeFormat;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.*;
import com.google.gwt.user.datepicker.client.DateBox;
import com.google.maps.gwt.client.GoogleMap;
import com.google.maps.gwt.client.LatLngBounds;
import com.google.maps.gwt.client.Marker;
import com.google.maps.gwt.client.Rectangle;
import kz.arta.synergy.maps.gwt.server.GetMarkersImpl;

import java.util.*;

/**
 * Created by root on 27.01.14.
 */
public class Components {

    public static final String HEIGHT_FILTER_COMPONENTS = "27px";
    // компоненты для отображения информации об опоре
    private TextBox number;
    private TextBox comment;
    private TextBox address;
    private VerticalPanel generalComponents;
    private MarkersAction markersAction;
    private HorizontalPanel horizontal2;
    private GoogleMap map;
    public HorizontalPanel listViewLayout;

    public void setMap(GoogleMap map) {
        this.map = map;
    }

    public HorizontalPanel getHorizontal2() {
        return horizontal2;
    }

    public TextBox getNumber() {
        return number;
    }

    public void setNumber(TextBox number) {
        this.number = number;
    }

    public TextBox getComment() {
        return comment;
    }

    public void setComment(TextBox comment) {
        this.comment = comment;
    }

    public TextBox getAddress() {
        return address;
    }

    public void setAddress(TextBox address) {
        this.address = address;
    }

    public VerticalPanel getGeneralComponents() {
        return generalComponents;
    }

    public void setMarkersAction(MarkersAction markersAction) {
        this.markersAction = markersAction;
    }

    public Components() {
        number = new TextBox();
        comment = new TextBox();
        address = new TextBox();
        generalComponents = new VerticalPanel();
        createFilters();
    }

    // метод создания компонентов. при клике на опору отображаем в них информацию об опоре
    public void createComponent() {

        listViewLayout = new HorizontalPanel();
        listViewLayout.setSpacing(5);

        generalComponents.setVisible(false);
        generalComponents.setSpacing(5);
        generalComponents.setVisible(false);

        HorizontalPanel horizontal1 = new HorizontalPanel();
        horizontal2 = new HorizontalPanel();
        HorizontalPanel horizontal3 = new HorizontalPanel();
        HorizontalPanel horizontal4 = new HorizontalPanel();

        Label num = new Label("Инвентарный номер");
        num.addStyleName("gwt-LabelTextColor");
        num.setWidth("180px");
        num.setWordWrap(false);
        Label com = new Label("Комментарий");
        com.setWidth("180px");
        com.addStyleName("gwt-LabelTextColor");
        Label add = new Label("Адрес");
        add.addStyleName("gwt-LabelTextColor");
        add.setWidth("180px");
        Label zon = new Label("Зона");
        zon.addStyleName("gwt-LabelTextColor");
        zon.setWidth("180px");

        number = new TextBox();
        number.setWidth("500px");
        number.setHeight("30px");

        comment = new TextBox();
        comment.setWidth("500px");
        comment.setHeight("30px");

        address = new TextBox();
        address.setWidth("500px");
        address.setHeight("30px");

        Button changeDatas = new Button("Сохранить");
        changeDatas.setWidth("110px");
        changeDatas.setHeight("30px");
        changeDatas.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() {

            @Override
            public void onClick(com.google.gwt.event.dom.client.ClickEvent clickEvent) {
                GetMarkersImpl.App.getInstance().changeDataSupp(number.getText(),
                        comment.getText(),
                        address.getText(),
                        markersAction.getSelectedMarkerID(),
                        markersAction.getAllMarkers().get(markersAction.getSelectedMarkerID()).getSynergyID(),
                        new AsyncCallback<Boolean>() {

                            @Override
                            public void onFailure(Throwable caught) {
                                Window.alert(caught.getMessage());
                            }

                            @Override
                            public void onSuccess(Boolean result) {
                                if (result) {
                                    markersAction.getAllMarkers().get(markersAction.getSelectedMarkerID()).
                                            setNumber(number.getText());
                                    markersAction.getAllMarkers().get(markersAction.getSelectedMarkerID()).
                                            setAddress(address.getText());
                                    markersAction.getAllMarkers().get(markersAction.getSelectedMarkerID()).
                                            setComment(comment.getText());
                                    markersAction.refreshList();
                                }
                            }
                        });
            }
        });

        Label link = new Label("Информация");
        link.addStyleName("gwt-LabelLink");
        link.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() {
            @Override
            public void onClick(com.google.gwt.event.dom.client.ClickEvent event) {
                getInfo();
            }
        });

        horizontal1.add(num);
        horizontal1.add(number);
        horizontal1.add(changeDatas);
        horizontal1.add(link);

        horizontal2.add(com);
        horizontal2.add(comment);
        horizontal3.add(add);
        horizontal3.add(address);
        horizontal4.add(zon);

        generalComponents.add(horizontal1);
        generalComponents.add(horizontal2);
        generalComponents.add(horizontal3);
//        generalComponents.add(horizontal4);


        listViewLayout.add(generalComponents);

        RootPanel.get("components").add(listViewLayout);
    }

    private void getInfo() {

        GetMarkersImpl.App.getInstance().getInfoProgramms(markersAction.getSelectedMarkerID(), new AsyncCallback<ArrayList<ItemInfo>>() {
            @Override
            public void onFailure(Throwable caught) {
                Window.alert(caught.toString());
            }

            @Override
            public void onSuccess(final ArrayList<ItemInfo> result) {
                if (result.size() == 0) {
                    Window.alert("Эта опора не состоит ни в одной из адресных программ");
                } else {
                    Grid grid = new Grid(result.size() + 1, 7);
                    grid.setVisible(true);
                    grid.setWidth("850px");
                    grid.setHeight("200px");

                    grid.clear();
                    grid.setText(0, 0, "№ договора");
                    grid.setText(0, 1, "Арендатор");
                    grid.setText(0, 2, "№ ад. программы");
                    grid.setText(0, 3, "Начало срока аренды");
                    grid.setText(0, 4, "Завершение срока аренды");
                    grid.setText(0, 5, "Установленное оборудование");
                    grid.setText(0, 6, "Подробнее");

                    grid.getCellFormatter().setStyleName(0, 0, "tableCell-odd");
                    grid.getCellFormatter().setStyleName(0, 1, "tableCell-odd");
                    grid.getCellFormatter().setStyleName(0, 2, "tableCell-odd");
                    grid.getCellFormatter().setStyleName(0, 3, "tableCell-odd");
                    grid.getCellFormatter().setStyleName(0, 4, "tableCell-odd");
                    grid.getCellFormatter().setStyleName(0, 5, "tableCell-odd");
                    grid.getCellFormatter().setStyleName(0, 6, "tableCell-odd");

                    for (int i = 0; i < result.size(); i++) {

                        final String synergyid = result.get(i).getSynergyid();
                        final String url = result.get(i).getUrl();

                        grid.setText(i + 1, 0, result.get(i).getContractNum());
                        grid.setText(i + 1, 1, result.get(i).getArendator());
                        grid.setText(i + 1, 2, result.get(i).getApNum());
                        grid.setText(i + 1, 3, result.get(i).getStartDate());
                        grid.setText(i + 1, 4, result.get(i).getFinishDate());
                        grid.setText(i + 1, 5, result.get(i).getOborud());


                        Label link = new Label("Подробнее");
                        link.setStyleName("gwt-LabelLinkTable");
                        link.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() {
                            @Override
                            public void onClick(com.google.gwt.event.dom.client.ClickEvent event) {
                                Window.open(url + "/?locale=ru&submodule=common&server_id=remote&action=open_document&document_identifier=" + synergyid, "_blank", "");
                            }
                        });

                        grid.setWidget(i + 1, 6, link);

                        grid.getCellFormatter().setStyleName(i + 1, 0, "tableCell-even");
                        grid.getCellFormatter().setStyleName(i + 1, 1, "tableCell-even");
                        grid.getCellFormatter().setStyleName(i + 1, 2, "tableCell-even");
                        grid.getCellFormatter().setStyleName(i + 1, 3, "tableCell-even");
                        grid.getCellFormatter().setStyleName(i + 1, 4, "tableCell-even");
                        grid.getCellFormatter().setStyleName(i + 1, 5, "tableCell-even");
                        grid.getCellFormatter().setStyleName(i + 1, 6, "tableCell-even");
                    }

                    DialogTable showTable = new DialogTable(grid);
                    showTable.center();
                    showTable.show();
                }
            }
        });
    }

    public class DialogTable extends DialogBox {

        public DialogTable(Grid g) {

            setText("Информация");
            setAnimationEnabled(true);
            setGlassEnabled(true);
            setModal(true);

            VerticalPanel panel = new VerticalPanel();
            panel.setHeight("250px");
            panel.setWidth("195px");
            panel.setSpacing(5);
            panel.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);

            Button b1 = new Button("Закрыть");
            b1.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() {
                @Override
                public void onClick(com.google.gwt.event.dom.client.ClickEvent event) {
                    removeFromParent();
                }
            });
            b1.setWidth("70px");

            ScrollPanel showPanel = new ScrollPanel();
            showPanel.setSize("875px", "250px");
            showPanel.add(g);

            panel.add(showPanel);
            panel.add(b1);
            setWidget(panel);
        }
    }

    public void createFilters() {

        GetAllHints getAllHints = new GetAllHints();

        VerticalPanel generalPanel = new VerticalPanel();
        generalPanel.setSpacing(6);

        VerticalPanel verticalPanel = new VerticalPanel();
        verticalPanel.setSpacing(6);

        final Label contract = new Label("Договор");
        contract.setStyleName("gwt-LabelFilter");

        Label programm = new Label("Адресная программа");
        programm.setStyleName("gwt-LabelFilter");
        programm.setWordWrap(false);

        Label support = new Label("Инвентарный номер опоры");
        support.setStyleName("gwt-LabelFilter");

        final SuggestBox contractTextBox = new SuggestBox(getAllHints.getContractsHints());
        contractTextBox.setWidth("270px");
        contractTextBox.setHeight(HEIGHT_FILTER_COMPONENTS);
        contractTextBox.setLimit(10);
        contractTextBox.addSelectionHandler(new SelectionHandler<SuggestOracle.Suggestion>() {
            @Override
            public void onSelection(SelectionEvent<SuggestOracle.Suggestion> suggestionSelectionEvent) {
                searchDogovor(contractTextBox.getText());
            }
        });

        final SuggestBox programmTextBox = new SuggestBox(getAllHints.getProgramms());
        programmTextBox.setWidth("270px");
        programmTextBox.setHeight(HEIGHT_FILTER_COMPONENTS);
        programmTextBox.setLimit(10);
        programmTextBox.addSelectionHandler(new SelectionHandler<SuggestOracle.Suggestion>() {
            @Override
            public void onSelection(SelectionEvent<SuggestOracle.Suggestion> suggestionSelectionEvent) {
                searchAdressProgramm(programmTextBox.getText());
            }
        });

        final SuggestBox supportTextBox = new SuggestBox(getAllHints.getSupportsHints());
        supportTextBox.setWidth("270px");
        supportTextBox.setHeight(HEIGHT_FILTER_COMPONENTS);
        supportTextBox.setLimit(10);
        supportTextBox.addSelectionHandler(new SelectionHandler<SuggestOracle.Suggestion>() {
            @Override
            public void onSelection(SelectionEvent<SuggestOracle.Suggestion> suggestionSelectionEvent) {
                searchSupp(supportTextBox.getText());
            }
        });

        DateTimeFormat dateFormat = DateTimeFormat.getFormat("yyyy-MM-dd");

        final DateBox startDate = new DateBox();
        startDate.setWidth("140px");
        startDate.setHeight(HEIGHT_FILTER_COMPONENTS);
        startDate.setEnabled(false);
        startDate.setFormat(new DateBox.DefaultFormat(dateFormat));

        final DateBox finishDate = new DateBox();
        finishDate.setWidth("140px");
        finishDate.setHeight(HEIGHT_FILTER_COMPONENTS);
        finishDate.setEnabled(false);
        finishDate.setFormat(new DateBox.DefaultFormat(dateFormat));

        final Button okSearch = new Button("Фильтровать");
        okSearch.setEnabled(false);
        okSearch.setHeight(HEIGHT_FILTER_COMPONENTS);
        okSearch.setStyleName("gwt-ButtonFilter");
        okSearch.addClickHandler(new ClickHandler() {
            @Override
            public void onClick(ClickEvent clickEvent) {
                if (startDate.getValue() != null && finishDate.getValue() != null) {
                    filterDatas(startDate.getValue(), finishDate.getValue());
                } else {
                    Window.alert("Одно из полей не заполнено");
                }
            }
        });

        HorizontalPanel hp = new HorizontalPanel();

        Label labelStartDate = new Label("Дата договора");
        labelStartDate.setStyleName("gwt-LabelFilter");

        Label labelFinishDate = new Label("Дата окончания");
        labelFinishDate.setStyleName("gwt-LabelFilter");

        CheckBox checkBox = new CheckBox("Сроки");
        checkBox.addValueChangeHandler(new ValueChangeHandler<Boolean>() {
            @Override
            public void onValueChange(ValueChangeEvent<Boolean> booleanValueChangeEvent) {
                if (booleanValueChangeEvent.getValue()) {
                    startDate.setEnabled(true);
                    finishDate.setEnabled(true);
                    okSearch.setEnabled(true);
                } else {
                    startDate.setEnabled(false);
                    finishDate.setEnabled(false);
                    okSearch.setEnabled(false);
                }
            }
        });

        hp.add(finishDate);
        hp.add(okSearch);

        verticalPanel.add(contract);
        verticalPanel.add(contractTextBox);
        verticalPanel.add(programm);
        verticalPanel.add(programmTextBox);
        verticalPanel.add(support);
        verticalPanel.add(supportTextBox);
        verticalPanel.add(checkBox);
        verticalPanel.add(labelStartDate);
        verticalPanel.add(startDate);
        verticalPanel.add(labelFinishDate);
        verticalPanel.add(hp);

        generalPanel.add(verticalPanel);

        RootPanel.get("filter").add(generalPanel);
    }

    private void searchDogovor(String searchText) {
        GetMarkers.App.getInstance().filterSupportsDogovors(searchText, new AsyncCallback<HashMap<String, Markers>>() {
            @Override
            public void onFailure(Throwable caught) {
                Window.alert(caught.getMessage());
            }

            @Override
            public void onSuccess(HashMap<String, Markers> result) {
                setMarkerOnMapFiltered(result);
            }
        });
    }

    private void searchAdressProgramm(String searchText) {
        GetMarkers.App.getInstance().filterSupportsProgramms(searchText, new AsyncCallback<HashMap<String, Markers>>() {
            @Override
            public void onFailure(Throwable caught) {
                Window.alert(caught.getMessage());
            }

            @Override
            public void onSuccess(HashMap<String, Markers> result) {
                setMarkerOnMapFiltered(result);
            }
        });
    }

    private void searchSupp(String searchText) {
        GetMarkersImpl.App.getInstance().searchSupports(searchText, new AsyncCallback<HashMap<String, Markers>>() {
            @Override
            public void onFailure(Throwable caught) {
                Window.alert(caught.getMessage());
            }

            @Override
            public void onSuccess(HashMap<String, Markers> result) {
                setMarkerOnMapFiltered(result);
            }
        });
    }

    public void filterDatas(Date dat1, Date dat2) {
        GetMarkersImpl.App.getInstance().filterDatas(dat1, dat2, new AsyncCallback<HashMap<String, Markers>>() {
            @Override
            public void onFailure(Throwable throwable) {
                Window.alert(throwable.getMessage());
            }

            @Override
            public void onSuccess(HashMap<String, Markers> s) {
                if (s.size() != 0) {
                    setMarkerOnMapFiltered(s);
                } else {
                    Window.alert("Ничего не нашлось");
                }
            }
        });
    }

    private void setMarkerOnMapFiltered(HashMap<String, Markers> result) {

        if (result.size() != 0) {
            markersAction.setAllMarkers(result);
            markersAction.clearMap();
            clearClusters();
            Set set = result.entrySet();
            Iterator i = set.iterator();
            while (i.hasNext()) {
                Map.Entry me = (Map.Entry) i.next();
                Markers mar = (Markers) me.getValue();
                markersAction.setMarker(mar.getLat(), mar.getLng(), mar.getId(), mar.getType(), true);
            }
            zoomMap();
        } else {
            Window.alert("empty");
        }
    }

    public native void clearClusters() /*-{
        markerCluster.clearMarkers();
    }-*/;

    public void zoomMap() {
        LatLngBounds latLngBounds = map.getBounds();
        Marker[] markers = markersAction.getMarkers();
        for(int i = 0; i < markers.length; i++) {
            latLngBounds.extend(markers[i].getPosition());
        }
        map.fitBounds(latLngBounds);
    }
}
